#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/*
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
 * │ ' │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ - │ = │       │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
 * │     │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │ ´ │ [ │     │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
 * │      │ A │ S │ D │ F │ G │ H │ J │ K │ L │ Ç │ ~ │ ] │    │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┤
 * │    │ \ │ Z │ X │ C │ V │ B │ N │ M │ , │ . │ ; │ / │      │
 * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬──┴─┬────┤
 * │    │    │    │                        │    │    │    │    │
 * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
 */
// Row 1
#define BR_QUOT (NUBS)   // '
#define BR_1    (N1)     // 1
#define BR_2    (N2)     // 2
#define BR_3    (N3)     // 3
#define BR_4    (N4)     // 4
#define BR_5    (N5)     // 5
#define BR_6    (N6)     // 6
#define BR_7    (N7)     // 7
#define BR_8    (N8)     // 8
#define BR_9    (N9)     // 9
#define BR_0    (N0)     // 0
#define BR_MINS (MINUS)  // -
#define BR_EQL  (EQUAL)  // =
// Row 2
#define BR_Q    (Q)    // Q
#define BR_W    (W)    // W
#define BR_E    (E)    // E
#define BR_R    (R)    // R
#define BR_T    (T)    // T
#define BR_Y    (Y)    // Y
#define BR_U    (U)    // U
#define BR_I    (I)    // I
#define BR_O    (O)    // O
#define BR_P    (P)    // P
#define BR_ACUT (LBKT) // ´ (dead)
#define BR_LBKT (RBKT) // [
// Row 3
#define BR_A    (A)    // A
#define BR_S    (S)    // S
#define BR_D    (D)    // D
#define BR_F    (F)    // F
#define BR_G    (G)    // G
#define BR_H    (H)    // H
#define BR_J    (J)    // J
#define BR_K    (K)    // K
#define BR_L    (L)    // L
#define BR_CCED (SEMI) // Ç
#define BR_TILD (SQT) // ~ (dead)
#define BR_RBKT (BSLH) // ]
// Row 4
#define BR_BSLS (GRAVE) // (backslash)
#define BR_Z    (Z)     // Z
#define BR_X    (X)     // X
#define BR_C    (C)     // C
#define BR_V    (V)     // V
#define BR_B    (B)     // B
#define BR_N    (N)     // N
#define BR_M    (M)     // M
#define BR_COMM (COMMA) // ,
#define BR_DOT  (DOT)   // .
#define BR_SCLN (SLASH) // ;
#define BR_SLSH (INT1)  // /

/* Shifted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐
 * │ " │ ! │ @ │ # │ $ │ % │ ¨ │ & │ * │ ( │ ) │ _ │ + │       │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤
 * │     │   │   │   │   │   │   │   │   │   │   │ ` │ { │     │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐    │
 * │      │   │   │   │   │   │   │   │   │   │   │ ^ │ } │    │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────┤
 * │    │ | │   │   │   │   │   │   │   │ < │ > │ : │ ? │      │
 * ├────┼───┴┬──┴─┬─┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬──┴─┬────┤
 * │    │    │    │                        │    │    │    │    │
 * └────┴────┴────┴────────────────────────┴────┴────┴────┴────┘
 */
#define BR_DQUO (LS(BR_QUOT)) // "
#define BR_EXCL (LS(N1))    // !
#define BR_AT   (LS(N2))    // @
#define BR_HASH (LS(N3))    // #
#define BR_DLR  (LS(N4))    // $
#define BR_PERC (LS(N5))    // %
#define BR_DIAE (LS(N6))    // ¨ (dead)
#define BR_AMPR (LS(N7))    // &
#define BR_ASTR (LS(N8))    // *
#define BR_LPRN (LS(N9))    // (
#define BR_RPRN (LS(N0))    // )
#define BR_UNDS (LS(MINUS)) // _
#define BR_PLUS (LS(EQUAL))  // +
// Row 2
#define BR_GRV  (LS(BR_ACUT)) // ` (dead)
#define BR_LBRC (LS(BR_LBKT)) // {
// Row 3
#define BR_CIRC (LS(BR_TILD)) // ^ (dead)
#define BR_RBRC (LS(BR_RBKT)) // }
// Row 4
#define BR_PIPE (LS(BR_BSLS)) // |
#define BR_LABK (LS(BR_COMM)) // <
#define BR_RABK (LS(BR_DOT))  // >
#define BR_COLN (LS(BR_SCLN)) // :
#define BR_QUES (LS(BR_SLSH)) // ?

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

/ {
  combos {
    compatible = "zmk,combos";

    combo_df_esc {
      timeout-ms = <40>;
      key-positions = <15 16>;
      bindings = <&kp ESC>;
    };
    combo_jk_esc {
      timeout-ms = <40>;
      key-positions = <19 20>;
      bindings = <&kp ESC>;
    };

    combo_sd_bspc {
      timeout-ms = <40>;
      key-positions = <14 15>;
      bindings = <&kp BSPC>;
      layers = <0 1>;
    };
    combo_kl_bspc {
      timeout-ms = <40>;
      key-positions = <20 21>;
      bindings = <&kp BSPC>;
      layers = <0 1>;
    };

    combo_sd_alt_bspc {
      timeout-ms = <40>;
      key-positions = <14 15>;
      bindings = <&kp LA(BSPC)>;
      layers = <2>;
    };
    combo_kl_alt_bspc {
      timeout-ms = <40>;
      key-positions = <20 21>;
      bindings = <&kp LA(BSPC)>;
      layers = <2>;
    };


    combo_sf_tab {
      timeout-ms = <40>;
      key-positions = <14 16>;
      bindings = <&kp TAB>;
    };
    combo_jl_tab {
      timeout-ms = <40>;
      key-positions = <19 21>;
      bindings = <&kp TAB>;
    };

    combo_sdf_ret {
      timeout-ms = <40>;
      key-positions = <14 15 16>;
      bindings = <&kp RET>;
    };
    combo_jkl_ret {
      timeout-ms = <40>;
      key-positions = <19 20 21>;
      bindings = <&kp RET>;
    };

    combo_comm_del {
      timeout-ms = <40>;
      key-positions = <32 33>;
      bindings = <&kp DEL>;
    };

  };
};

&mt {
  flavor = "tap-preferred";
  tapping-term-ms = <250>;
  quick-tap-ms = <0>;
  require-prior-idle-ms = <75>;
};

/ {
  keymap {
    compatible = "zmk,keymap";

// QWERTY
// ┌─────┬─────┬─────┬─────┬─────┐    ┌─────┬─────┬─────┬─────┬─────┐
// │  Q  │  W  │  E  │  R  │  T  │    │  Y  │  U  │  I  │  O  │  P  │
// │     │     │     │    Caps   │    │    Caps   │     │     │     │
// ├─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┤
// │  A  │  S  │  D  │  F  │  G  │    │  H  │  J  │  K  │  L  │  ´  │   (tap)
// │     │    Bspc  Esc    │     │    │     │    Esc   Bspc   │     │   (combo)
// │ Cmd │ Alt │ Ctl │ Sft │     │    │     │ Sft │ Ctl │ Alt │ Cmd │   (hold)
// ├─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┤
// │  Z  │  X  │  C  │  V  │  B  │    │  N  │  M  │  ,  │  .  │  ;  │
// │     │     │     │     │     │    │     │     │    Del    │     │
// └─────┴─────┼─────┼─────┼─────┴─┐┌─┴─────┼─────┼─────┼─────┴─────┘
//             │ Adj │ Num │ Space ││ Space │ Sym │ Adj │
//             └─────┴─────┴───────┘└───────┴─────┴─────┘
    default_layer {
      label = "QWERTY";
      bindings = <
   &kp TAB   &kp Q      &kp W      &kp E       &kp R       &kp T     &kp Y     &kp U       &kp I       &kp O      &kp P            &kp BSPC
   &kp LCTRL &mt LCMD A &mt LALT S &mt LCTRL D &mt LSHFT F &kp G     &kp H     &mt RSHFT J &mt RCTRL K &mt RALT L &mt RCMD BR_ACUT &kp SQT
   &kp LSHFT &kp Z      &kp X      &kp C       &kp V       &kp B     &kp N     &kp M       &kp COMMA   &kp DOT    &kp BR_SCLN      &kp ESC
                                  &mo 3      &mo 1      &kp SPACE &kp SPACE &mo 2      &mo 3
      >;
    };

// Numbers
// ┌─────┬─────┬─────┬─────┬─────┐    ┌─────┬─────┬─────┬─────┬─────┐
// │  1  │  2  │  3  │  4  │  5  │    │  6  │  7  │  8  │  9  │  0  │
// ├─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┤
// │  /  │  ?  │  -  │  =  │  '  │    │  ←  │  ↓  │  ↑  │  →  │  ~  │
// ├─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┤
// │  \  │     │  ç  │  [  │  ]  │    │  {  │  }  │  ,  │  .  │  ;  │
// └─────┴─────┼─────┼─────┼─────┴─┐┌─┴─────┼─────┼─────┼─────┴─────┘
//             │ Adj │     │ Space ││ Space │ Sym │ Adj │
//             └─────┴─────┴───────┘└───────┴─────┴─────┘
    number_layer {
      label = "NUMBER";
      bindings = <
   &trans &kp N1      &kp N2      &kp N3      &kp N4      &kp N5      &kp N6      &kp N7      &kp N8 &kp N9    &kp N0      &trans
   &trans &kp BR_SLSH &kp BR_QUES &kp MINUS   &kp EQUAL   &kp BR_QUOT &kp LEFT    &kp DOWN    &kp UP &kp RIGHT &kp BR_TILD &trans
   &trans &kp BR_BSLS &trans      &kp BR_CCED &kp BR_LBKT &kp BR_RBKT &kp BR_LBRC &kp BR_RBRC &trans &trans    &trans      &trans
                                  &trans      &trans      &trans      &trans      &trans      &trans
      >;
    };

// Symbols
// ┌─────┬─────┬─────┬─────┬─────┐    ┌─────┬─────┬─────┬─────┬─────┐
// │  !  │  @  │  #  │  $  │  %  │    │  ^  │  &  │  *  │  (  │  )  │
// ├─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┤
// │  /  │  ?  │  _  │  +  │  "  │    │ A ← │ A ↓ │ A ↑ │ A → │  ^  │
// ├─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┤
// │  |  │     │  ç  │  [  │  ]  │    │  {  │  }  │  <  │  >  │  :  │
// └─────┴─────┼─────┼─────┼─────┴─┐┌─┴─────┼─────┼─────┼─────┴─────┘
//             │ Adj │     │ Space ││ Space │     │ Adj │
//             └─────┴─────┴───────┘└───────┴─────┴─────┘
    symbol_layer {
      label = "SYMBOL";
      bindings = <
   &trans &kp BR_EXCL &kp BR_AT   &kp BR_HASH &kp BR_DLR  &kp BR_PERC &kp BR_DIAE  &kp BR_AMPR  &kp BR_ASTR &kp BR_LPRN   &kp BR_RPRN &trans
   &trans &kp BR_SLSH &kp BR_QUES &kp BR_UNDS &kp BR_PLUS &kp BR_DQUO &kp LA(LEFT) &kp LA(DOWN) &kp LA(UP)  &kp LA(RIGHT) &kp BR_CIRC &trans
   &trans &kp BR_PIPE &trans      &kp BR_CCED &kp BR_LBKT &kp BR_RBKT &kp BR_LBRC  &kp BR_RBRC  &kp BR_LABK &kp BR_RABK   &kp BR_COLN &trans
                                  &trans    &trans &trans   &trans   &trans      &trans
      >;
    };

// Adjust
// ┌─────┬─────┬─────┬─────┬─────┐    ┌─────┬─────┬─────┬─────┬─────┐
// │ F1  │ F2  │ F3  │ F4  │ F5  │    │ Prv │ Ply │ Nxt │ Vo- │ Vo+ │
// ├─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┤
// │     │     │     │ ⌘ T │ ⌘ ' │    │  ←  │  ↓  │  ↑  │  →  │ F11 │
// ├─────┼─────┼─────┼─────┼─────┤    ├─────┼─────┼─────┼─────┼─────┤
// │ BT0 │ BT1 │ BT2 │ BT3 │ CLR │    │     │ Br- │ Br+ │     │     │
// └─────┴─────┼─────┼─────┼─────┴─┐┌─┴─────┼─────┼─────┼─────┴─────┘
//             │     │     │       ││       │     │     │
//             └─────┴─────┴───────┘└───────┴─────┴─────┘
    adjust_layer {
      label = "ADJUST";
      bindings = <
   &trans &kp F1       &kp F2       &kp F3       &kp F4       &kp F5          &kp C_PREV &kp C_PLAY   &kp C_NEXT   &kp K_VOL_DN &kp K_VOL_UP &trans
   &trans &trans       &trans       &trans       &kp LG(TAB)  &kp LG(BR_QUOT) &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT    &kp F11      &trans
   &trans &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR      &trans     &kp C_BRI_DN &kp C_BRI_UP &trans       &trans       &trans
                                    &trans       &trans       &trans          &trans     &trans       &trans
      >;
    };
  };
};
